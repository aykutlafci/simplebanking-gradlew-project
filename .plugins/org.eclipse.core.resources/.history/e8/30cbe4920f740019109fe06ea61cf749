package com.mansel.tombstone.service;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.mansel.tombstone.constant.EntityStatusType;
import com.mansel.tombstone.exception.BusinessException;
import com.mansel.tombstone.model.dto.CategoryDto;
import com.mansel.tombstone.model.entitiy.Category;
import com.mansel.tombstone.model.entitiy.Product;
import com.mansel.tombstone.model.entitiy.QCategory;
import com.mansel.tombstone.repository.CategoryRepository;
import com.mansel.tombstone.repository.ProductRepository;
import com.mansel.tombstone.service.base.AbstractService;
import com.querydsl.core.types.dsl.BooleanExpression;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Service

@Getter
@RequiredArgsConstructor
public class ProductEntryTypeService extends AbstractService<ProductEntryType> implements Serializable  {

	private static final long serialVersionUID = 4013174145094649484L;
	private final CategoryRepository repository;
	private final ProductRepository productRepository;

	@Transactional(propagation = Propagation.SUPPORTS)
	public List<ProductEntryTypeService> getProductEntryTypes() {
		return repository.findAll();
	}
	
	@Transactional(propagation = Propagation.SUPPORTS)
	public List<ProductEntryTypeService> getActiveProductEntryTypes() {
		return repository.findByEntityStatusType(EntityStatusType.ACTIVE);
	}

	@Transactional
	public ProductEntryTypeService saveProductEntryType(ProductEntryTypeService productEntryType) {
		if (productEntryType.getId() != null && productEntryType.getId() > 0L) {
			ProductEntryTypeService entity = repository.findById(productEntryType.getId()).get();
			if (!entity.getName().equalsIgnoreCase(productEntryType.getName())
					&& repository.findByName(productEntryType.getName()) != null) {
				throw new BusinessException(String
						.format("(%s) adlı kategori tanımlı olduğu kayıt için güncellenmiyor.", productEntryType.getName()));
			}
			entity.setDescription(productEntryType.getDescription());
			entity.setName(productEntryType.getName());
			return save(entity);
		}

		ProductEntryTypeService productEntryTypeEntity = repository.findByName(productEntryType.getName());
		if (productEntryTypeEntity == null) {
			return save(productEntryType);
		}
		throw new BusinessException(
				String.format("(%s) adlı kategori tanımlı olduğu için eklenmiyor.", productEntryType.getName()));
	}


	@Transactional(propagation = Propagation.SUPPORTS)
	public Page<ProductEntryTypeService> getPageAbleFilterList(ProductEntryDto productEntryDto, PageRequest pageable) {
		BooleanExpression expression = QProductEntry.productEntry.isNotNull();
		if (!Objects.isNull(productEntryDto.getName())) {
			expression = expression.and(QProductEntry.productEntry.name.containsIgnoreCase(StringUtils.trimWhitespace(productEntryDto.getName())));
		}
		if (!Objects.isNull(productEntryDto.getDescription())) {
			expression = expression
					.and(QProductEntry.productEntry.description.containsIgnoreCase(productEntryDto.getDescription()));
		}
		if (!Objects.isNull(productEntryDto.getEntityStatusType())) {
			expression = expression.and(QProductEntry.productEntry.entityStatusType.eq(productEntryDto.getEntityStatusType()));
		}
		return repository.findAll(expression, pageable);
	}

	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public boolean deleteById(long productEntryId) {
		List<Product> courses = productRepository.findByCategoryId(productEntryId);
		if (!courses.isEmpty()) {
			throw new BusinessException(String.format(
					"(%s) nolu kategoriye ait tanımlı ürünler var. Kategoriyi silmek için önce kategorinin kullanıldığı ürünleri siliniz.",
					productEntryId));
		}
		cancelled(find(productEntryId));
		return true;
	}

	public List<ProductEntry> getProductEntryByStatusForActive() {
		return repository.findByEntityStatusType(EntityStatusType.ACTIVE);
	}
}
